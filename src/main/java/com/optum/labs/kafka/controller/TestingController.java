package com.optum.labs.kafka.controller;

import com.optum.labs.kafka.entity.CanDelete;
import com.optum.labs.kafka.service.KafkaMessageConsumer;
import com.optum.labs.kafka.streams.FinalOutputStream;
import com.optum.labs.kafka.streams.TestingStream;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.time.LocalDate;
import java.util.List;

@RestController
public class TestingController {

    @Autowired
    private TestingStream testingStream;

    @Autowired
    private KafkaMessageConsumer kafkaConsumer;

    @Autowired
    private FinalOutputStream finalOutputStream;

    /**
     * will give you the data between 2 dates.
     * If only 2 transactions made between specific dates than other dates will replace with the
     * data generated by faker library. This method will call the testing stream that we created
     * to check basic calculation instead of running all the mysql connectors to check calculation.
     * In short, shortcut to check the code functionality
     * @param startDate
     * @param endDate
     * @return
     */
    @GetMapping("/result")
    public ResponseEntity<List<CanDelete>> getResult(@RequestParam("startDate")@DateTimeFormat(pattern = "yyyy-MM-dd")LocalDate startDate,
                                                    @RequestParam("endDate")@DateTimeFormat(pattern = "yyyy-MM-dd")LocalDate endDate){
        List<CanDelete> data= testingStream.getDataBetweenDates(startDate,endDate);
        return ResponseEntity.ok(data);
    }

    /**
     * It will check the actual code calculation. We have total of 15 topics and topic 15 is the final topic
     * will receive all the data from rest of 14 topics. We need to do filter and do the calcuations
     * and save the data into KSQL db.
     * @param startDate
     * @param endDate
     * @return
     */
    @GetMapping("/final")
    public ResponseEntity<List<CanDelete>> getResultStream15(@RequestParam("startDate")@DateTimeFormat(pattern = "yyyy-MM-dd")LocalDate startDate,
                                                     @RequestParam("endDate")@DateTimeFormat(pattern = "yyyy-MM-dd")LocalDate endDate){
        List<CanDelete> data= finalOutputStream.getDataBetweenDates(startDate,endDate);
        return ResponseEntity.ok(data);
    }

    /**
     * Here we are just testing that data is saved into the list or not, which we are getting from topic
     * @return
     */
    @GetMapping("/canDeleteResult")
    public List<CanDelete> getResult(){
        return testingStream.getAllListElement();
    }

    /**
     * This method is not required but for testing purpose, I did that. I need the total count of messages
     * that are available on the topic.
     * @return
     */
    @GetMapping("/count")
    public Integer count(){
        return testingStream.consumerCode();
    }

    /**
     * It will return the list of messages available on the topic. This method is just for testing purpose
     * @return
     */
    @GetMapping("/kafka-results")
    public List<String> getKafkaResults() {
        return kafkaConsumer.getResults();
    }


}
