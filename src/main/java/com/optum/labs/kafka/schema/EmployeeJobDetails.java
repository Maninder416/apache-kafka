/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.optum.labs.kafka.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EmployeeJobDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 862651237706909949L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmployeeJobDetails\",\"namespace\":\"com.optum.labs.kafka.schema\",\"fields\":[{\"name\":\"id\",\"type\":\"int\",\"default\":-1},{\"name\":\"sin\",\"type\":\"int\",\"default\":-1},{\"name\":\"department\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EmployeeJobDetails> ENCODER =
      new BinaryMessageEncoder<EmployeeJobDetails>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EmployeeJobDetails> DECODER =
      new BinaryMessageDecoder<EmployeeJobDetails>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EmployeeJobDetails> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EmployeeJobDetails> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EmployeeJobDetails>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EmployeeJobDetails to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EmployeeJobDetails from a ByteBuffer. */
  public static EmployeeJobDetails fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int id;
  @Deprecated public int sin;
  @Deprecated public java.lang.CharSequence department;
  @Deprecated public java.lang.CharSequence status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EmployeeJobDetails() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param sin The new value for sin
   * @param department The new value for department
   * @param status The new value for status
   */
  public EmployeeJobDetails(java.lang.Integer id, java.lang.Integer sin, java.lang.CharSequence department, java.lang.CharSequence status) {
    this.id = id;
    this.sin = sin;
    this.department = department;
    this.status = status;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return sin;
    case 2: return department;
    case 3: return status;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: sin = (java.lang.Integer)value$; break;
    case 2: department = (java.lang.CharSequence)value$; break;
    case 3: status = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'sin' field.
   * @return The value of the 'sin' field.
   */
  public java.lang.Integer getSin() {
    return sin;
  }

  /**
   * Sets the value of the 'sin' field.
   * @param value the value to set.
   */
  public void setSin(java.lang.Integer value) {
    this.sin = value;
  }

  /**
   * Gets the value of the 'department' field.
   * @return The value of the 'department' field.
   */
  public java.lang.CharSequence getDepartment() {
    return department;
  }

  /**
   * Sets the value of the 'department' field.
   * @param value the value to set.
   */
  public void setDepartment(java.lang.CharSequence value) {
    this.department = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Creates a new EmployeeJobDetails RecordBuilder.
   * @return A new EmployeeJobDetails RecordBuilder
   */
  public static com.optum.labs.kafka.schema.EmployeeJobDetails.Builder newBuilder() {
    return new com.optum.labs.kafka.schema.EmployeeJobDetails.Builder();
  }

  /**
   * Creates a new EmployeeJobDetails RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EmployeeJobDetails RecordBuilder
   */
  public static com.optum.labs.kafka.schema.EmployeeJobDetails.Builder newBuilder(com.optum.labs.kafka.schema.EmployeeJobDetails.Builder other) {
    return new com.optum.labs.kafka.schema.EmployeeJobDetails.Builder(other);
  }

  /**
   * Creates a new EmployeeJobDetails RecordBuilder by copying an existing EmployeeJobDetails instance.
   * @param other The existing instance to copy.
   * @return A new EmployeeJobDetails RecordBuilder
   */
  public static com.optum.labs.kafka.schema.EmployeeJobDetails.Builder newBuilder(com.optum.labs.kafka.schema.EmployeeJobDetails other) {
    return new com.optum.labs.kafka.schema.EmployeeJobDetails.Builder(other);
  }

  /**
   * RecordBuilder for EmployeeJobDetails instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EmployeeJobDetails>
    implements org.apache.avro.data.RecordBuilder<EmployeeJobDetails> {

    private int id;
    private int sin;
    private java.lang.CharSequence department;
    private java.lang.CharSequence status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.optum.labs.kafka.schema.EmployeeJobDetails.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sin)) {
        this.sin = data().deepCopy(fields()[1].schema(), other.sin);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.department)) {
        this.department = data().deepCopy(fields()[2].schema(), other.department);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EmployeeJobDetails instance
     * @param other The existing instance to copy.
     */
    private Builder(com.optum.labs.kafka.schema.EmployeeJobDetails other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sin)) {
        this.sin = data().deepCopy(fields()[1].schema(), other.sin);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.department)) {
        this.department = data().deepCopy(fields()[2].schema(), other.department);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.optum.labs.kafka.schema.EmployeeJobDetails.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.optum.labs.kafka.schema.EmployeeJobDetails.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sin' field.
      * @return The value.
      */
    public java.lang.Integer getSin() {
      return sin;
    }

    /**
      * Sets the value of the 'sin' field.
      * @param value The value of 'sin'.
      * @return This builder.
      */
    public com.optum.labs.kafka.schema.EmployeeJobDetails.Builder setSin(int value) {
      validate(fields()[1], value);
      this.sin = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sin' field has been set.
      * @return True if the 'sin' field has been set, false otherwise.
      */
    public boolean hasSin() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sin' field.
      * @return This builder.
      */
    public com.optum.labs.kafka.schema.EmployeeJobDetails.Builder clearSin() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'department' field.
      * @return The value.
      */
    public java.lang.CharSequence getDepartment() {
      return department;
    }

    /**
      * Sets the value of the 'department' field.
      * @param value The value of 'department'.
      * @return This builder.
      */
    public com.optum.labs.kafka.schema.EmployeeJobDetails.Builder setDepartment(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.department = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'department' field has been set.
      * @return True if the 'department' field has been set, false otherwise.
      */
    public boolean hasDepartment() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'department' field.
      * @return This builder.
      */
    public com.optum.labs.kafka.schema.EmployeeJobDetails.Builder clearDepartment() {
      department = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.optum.labs.kafka.schema.EmployeeJobDetails.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.status = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.optum.labs.kafka.schema.EmployeeJobDetails.Builder clearStatus() {
      status = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EmployeeJobDetails build() {
      try {
        EmployeeJobDetails record = new EmployeeJobDetails();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.sin = fieldSetFlags()[1] ? this.sin : (java.lang.Integer) defaultValue(fields()[1]);
        record.department = fieldSetFlags()[2] ? this.department : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.status = fieldSetFlags()[3] ? this.status : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EmployeeJobDetails>
    WRITER$ = (org.apache.avro.io.DatumWriter<EmployeeJobDetails>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EmployeeJobDetails>
    READER$ = (org.apache.avro.io.DatumReader<EmployeeJobDetails>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
